service: student

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
 

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs4.3
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  create2:
    handler: todosStaff/create.create
    events:
      - http:
          path: todosStaff
          method: post
          cors: true

  createTemp:
    handler: todosTempCompany/create.create
    events:
      - http:
          path: todosTempCompany
          method: post
          cors: true

  createCompany:
    handler: todosCompany/create.create
    events:
      - http:
          path: todosCompany
          method: post
          cors: true 

  createNoOfCompany:
    handler: todosNoOfCompany/create.create
    events:
      - http:
          path: todosNoOfCompany
          method: post
          cors: true       

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  listStaff:
    handler: todosStaff/list.list
    events:
      - http:
          path: todosStaff
          method: get
          cors: true

  listTemp:
    handler: todosTempCompany/list.list
    events:
      - http:
          path: todosTempCompany
          method: get
          cors: true   

  listCompany:
    handler: todosCompany/list.list
    events:
      - http:
          path: todosCompany
          method: get
          cors: true  
          
  listNoOfCompany:
    handler: todosNoOfCompany/list.list
    events:
      - http:
          path: todosNoOfCompany
          method: get
          cors: true  

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{name}
          method: get
          cors: true

  getStaff:
    handler: todosStaff/get.get
    events:
      - http:
          path: todosStaff/{name}
          method: get
          cors: true  
  
  getTemp:
    handler: todosTempCompany/get.get
    events:
      - http:
          path: todosTempCompany/{name}
          method: get
          cors: true        

  getCompany:
    handler: todosCompany/get.get
    events:
      - http:
          path: todosCompany/{name}
          method: get
          cors: true
          
  getNoOfCompany:
    handler: todosNoOfCompany/get.get
    events:
      - http:
          path: todosNoOfCompany/{id}
          method: get
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{name}
          method: put
          cors: true

  updateStaff:
    handler: todosStaff/update.update
    events:
      - http:
          path: todosStaff/{name}
          method: put
          cors: true        

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{name}
          method: delete
          cors: true

  deleteStaff:
    handler: todosStaff/delete.delete
    events:
      - http:
          path: todosStaff/{name}
          method: delete
          cors: true        

  deleteTemp:
    handler: todosTempCompany/delete.delete
    events:
      - http:
          path: todosTempCompany/{name}
          method: delete
          cors: true  

resources:
  Resources:
    TodosDynamoDbTable1:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
 
    TodosDynamoDbTable2:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
          KeySchema:
          -
            AttributeName: name
            KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          TableName: "supervisor"

    TodosDynamoDbTable3:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
          KeySchema:
          -
            AttributeName: name
            KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          TableName: "TempCompany"    

    TodosDynamoDbTable4:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
          KeySchema:
          -
            AttributeName: name
            KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          TableName: "Company"

    TodosDynamoDbTable5:
        Type: 'AWS::DynamoDB::Table'
        DeletionPolicy: Retain
        Properties:
          AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          KeySchema:
          -
            AttributeName: id
            KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          TableName: "NoOfCompany"